{
  "matchValue" : "",
  "type" : 1,
  "name" : " 阿里云盘脚本V5.9【兼容阿里新版本】影音宝Token",
  "code" : "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDpmL\/ph4zkupHnm5johJrmnKxWNS4544CQ5YW85a656Zi\/6YeM5paw54mI5pys44CRCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2Jicy50YW1wZXJtb25rZXkubmV0LmNuLwovLyBAdmVyc2lvbiAgICAgIDY2LjkwCi8vIEBkZXNjcmlwdGlvbiAg44CQYmJzLnRhbXBlcm1vbmtleS5uZXQuY27jgJHmnY7mgZLpgZMKLy8gQGF1dGhvciAgICAgICDjgJBiYnMudGFtcGVybW9ua2V5Lm5ldC5jbuOAkeadjuaBkumBkwovLyBAc291cmNlICAgICAgIGh0dHBzOi8vc2NyaXB0LnRhbXBlcm1vbmtleS5uZXQuY24vNTcudXNlci5qcwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vcGFzc3BvcnQuYWxpeXVuZHJpdmUuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vZHJpdmUvKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9kcml2ZQovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vYWxpeXVuZHJpdmUuY29tL2RyaXZlLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL2FsaXl1bmRyaXZlLmNvbS9kcml2ZQovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9wYXNzcG9ydC5hbGl5dW5kcml2ZS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly93d3cuYWxpeXVuZHJpdmUuY29tL2RyaXZlLyoKLy8gQG1hdGNoICAgICAgICBodHRwOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9kcml2ZQovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9hbGl5dW5kcml2ZS5jb20vZHJpdmUvKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9hbGl5dW5kcml2ZS5jb20vZHJpdmUKLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP2RvbWFpbj1hbGl5dW5kcml2ZS5jb20KLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5ib290Y2RuLm5ldC9hamF4L2xpYnMvbG9kYXNoLmpzLzQuMTcuMjEvbG9kYXNoLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uYm9vdGNkbi5uZXQvYWpheC9saWJzL2pzLXNoYTEvMC42LjAvc2hhMS5qcwovLyBAZ3JhbnQgICAgICAgIHVuc2FmZVdpbmRvdwovLyBAZ3JhbnQgICAgICAgIEdNX3NldENsaXBib2FyZAovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBjb25uZWN0ICAgICAgYWxpeXVuZHJpdmUuY29tCi8vIEBjb25uZWN0ICAgICAgYWxpY2xvdWRjY3AuY29tCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09CgpsZXQgdXNlcm5hbWUgPSAnJwpsZXQgcGFzc3dvcmQgPSAnJwovL+iHquWKqOeZu+mZhumFjee9rumhuQpsZXQgTmV3TGluayA9IHRydWU7Ci8v5L2\/55So5paw54mI6ZO+5o6lCmxldCBGaWxlTGlzdCA9IFtdCmxldCBTZWFyY2hsaXN0ID0gW10KbGV0IENyZWF0ZUxpc3RuZXIgPSBmYWxzZTsKbGV0IEdlbmVyYXRlRmlsZUluU2hvdyA9IGZhbHNlOwpsZXQgcGFyZW50X2ZpbGVfaWQgPSAncm9vdCcKbGV0IGxpc3R1cmwgPSAnJwpsZXQgQ3JlYXRlU2F2ZUJ0biA9IGZhbHNlOwpsZXQgVG90YWxsaXN0bnVtID0gMDsKbGV0IFN1Ymxpc3RudW0gPSAwOwp2YXIgU2hvd0ZpbGVPYmogPSB7CiAgICBuYW1lOiAn5paH5Lu26I635Y+W5aSx6LSlJywKICAgIGNvbnRlbnRfaGFzaDogJ2hhc2jojrflj5blpLHotKUnLAogICAgc2l6ZTogJ+WFrOS8l+WPtzrlj5vpgIbpnZLlubTml4XoiI3vvIzmnaXoh6rmsrnnjLTkuK3mlofnvZE6YmJzLnRhbXBlcm1vbmtleS5uZXQuY24nLAogICAgY29udGVudF90eXBlOiAnRnVjY2NjY2NrJywKICAgIGZpbGVfaWQ6ICflpKnmiY3lsJHlubTmnY7mgZLpgZMnLAogICAgY29udGVudF90eXBlOiAn57O757uf5p2O5oGS6YGT5ZC554mb6YC855CG6K6677yMUVE0NTQ4MjEyJwp9CmxldCBhY2Nlc3N0b2tlbiA9ICcnCmxldCBmaWxlbnVtID0gMDsKbGV0IG5leHRfbWFya2VybGlzdCA9IFtdCmxldCB0b3RhbG51bSA9IDA7CmxldCBVcGxvYWRsaXN0ID0gW10KbGV0IFN1Y2Nlc3MgPSAwOwpsZXQgRmFpbGUgPSAwOwpsZXQgR2VuZXJhdGVEaWFsb2dTaG93Oy8v5a+56K+d5qGGMQpsZXQgR2VuZXJhdGVGaWxlaW5EaWFsb2dTaG93Oy8v5a+56K+d5qGGMgpsZXQgR2VuZXJhdGVTaG93ID0gZmFsc2UKbGV0IHVwbG9hZHNpemUgPSAxMDAwMDAwCi8v5LuW5aaI55yL5LiN5oeC5LqG77yM5YaZ55qE5piv5ZWlCmZ1bmN0aW9uIEdldEZpbGVTaGExRW5jcih0ZW1wb2JqKSB7CiAgICBpZiAoTmV3TGluayA9PSB0cnVlKSB7CiAgICAgICAgbGV0IG5hbWUgPSB0ZW1wb2JqLm5hbWUucmVwbGFjZSgnfCcsICc9JykKICAgICAgICBpZiAobmFtZSA9PT0gJycpIHsKICAgICAgICAgICAgbmFtZSA9ICduYW1laXNudWxsJwogICAgICAgIH0KICAgICAgICByZXR1cm4gJ2FsaXl1bnBhbjovLycgKyBuYW1lICsgJ3wnICsgdGVtcG9iai5jb250ZW50X2hhc2gucmVwbGFjZSgnfCcsICc9JykgKyAnfCcgKyB0ZW1wb2JqLnNpemUgKyAnfCcgKyB0ZW1wb2JqLmNvbnRlbnRfdHlwZS5yZXBsYWNlKCd8JywgJz0nKQogICAgfQogICAgcmV0dXJuIHdpbmRvdy5idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgbmFtZTogdGVtcG9iai5uYW1lLAogICAgICAgIGNvbnRlbnRfaGFzaDogdGVtcG9iai5jb250ZW50X2hhc2gsCiAgICAgICAgc2l6ZTogdGVtcG9iai5zaXplLAogICAgICAgIGNvbnRlbnRfdHlwZTogdGVtcG9iai5jb250ZW50X3R5cGUsCiAgICB9KSkpKQp9CmZ1bmN0aW9uIEN1cnJlbnRUZXh0KCkgewogICAgdmFyIGQgPSBuZXcgRGF0ZSgpLAogICAgICAgIHN0ciA9ICcnOwogICAgc3RyICs9IGQuZ2V0RnVsbFllYXIoKSArICflubQnOwogICAgc3RyICs9IGQuZ2V0TW9udGgoKSArIDEgKyAn5pyIJzsKICAgIHN0ciArPSBkLmdldERhdGUoKSArICfml6UnOwogICAgc3RyICs9IGQuZ2V0SG91cnMoKSArICfml7YnOwogICAgc3RyICs9IGQuZ2V0TWludXRlcygpICsgJ+WIhic7CiAgICBzdHIgKz0gZC5nZXRTZWNvbmRzKCkgKyAn56eSJzsKICAgIHJldHVybiBzdHIgKyAn5bqP5YiX5paH5Lu2LnR4dCc7Cn0KYXN5bmMgZnVuY3Rpb24gQ3JlYXRlVGV4dFVwbG9hZChuYW1lLCBzaXplLCBoYXNoKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIGxldCB1c2VydWlkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSkuZGVmYXVsdF9kcml2ZV9pZAogICAgICAgIGxldCB1cGxvYWR0ZXh0ID0gJ3siZHJpdmVfaWQiOiInICsgdXNlcnVpZCArICciLCJwYXJ0X2luZm9fbGlzdCI6W3sicGFydF9udW1iZXIiOjF9XSwicGFyZW50X2ZpbGVfaWQiOiInICsgcGFyZW50X2ZpbGVfaWQgKyAnIiwibmFtZSI6IicgKyBuYW1lICsKICAgICAgICAgICAgJyIsInR5cGUiOiJmaWxlIiwiY2hlY2tfbmFtZV9tb2RlIjoiYXV0b19yZW5hbWUiLCJzaXplIjonICsgc2l6ZSArICcsImNvbnRlbnRfaGFzaCI6IicgKyBoYXNoICsgJyIsImNvbnRlbnRfaGFzaF9uYW1lIjoic2hhMSJ9JwogICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL3YyL2ZpbGUvY3JlYXRlIiwKICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgIGRhdGE6IHVwbG9hZHRleHQsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICJDb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04IiwKICAgICAgICAgICAgICAgICJBdXRob3JpemF0aW9uIjogYWNjZXNzdG9rZW4KICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpOwoKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIFVwbG9hZFRleHRCaW4odGFnZXR1cmwsIHRhcmdldGRhdGEpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CgoKICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgIHVybDogdGFnZXR1cmwsCiAgICAgICAgICAgIG1ldGhvZDogIlBVVCIsCiAgICAgICAgICAgIGRhdGE6IHRhcmdldGRhdGEsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICJDb250ZW50LXR5cGUiOiAiICIsCiAgICAgICAgICAgICAgICAiUmVmZXJlciI6ICJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vIiwKICAgICAgICAgICAgICAgIC8vICJBdXRob3JpemF0aW9uIjogYWNjZXNzdG9rZW4KICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy9iaW5hcnk6dHJ1ZSwKICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpOwoKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIENvbXBsZXRlKHVwbG9hZF9pZCwgZmlsZV9pZCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBsZXQgdXNlcnVpZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpLmRlZmF1bHRfZHJpdmVfaWQKICAgICAgICBsZXQgdXBsb2FkdGV4dCA9ICd7ImRyaXZlX2lkIjoiJyArIHVzZXJ1aWQgKyAnIiwidXBsb2FkX2lkIjoiJyArIHVwbG9hZF9pZCArICciLCJmaWxlX2lkIjoiJyArIGZpbGVfaWQgKyAnIn0nCiAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICB1cmw6ICdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vdjIvZmlsZS9jb21wbGV0ZScsCiAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICBkYXRhOiB1cGxvYWR0ZXh0LAoKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgIkNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBhY2Nlc3N0b2tlbgogICAgICAgICAgICB9LAogICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlVGV4dCk7CgogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKfQphc3luYyBmdW5jdGlvbiBVcGxvYWRUZXh0VG9BbGlZdW5wYW4odGV4dCkgewogICAgdmFyIHRlbXBibG9iID0gbmV3IEJsb2IoW3RleHRdKQogICAgaWYgKHRlbXBibG9iLnNpemUgPiB1cGxvYWRzaXplKSB7CiAgICAgICAgYWxlcnQoJ+aWh+S7tui2heWHuuiEmuacrOmZkOWItuWkp+Wwj++8jOaXoOazleS4iuS8oOiHs+S6keebmO+8geivt+mAieaLqeWvvOWHuuaWh+S7ticpCiAgICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IGNyZWF0ZSA9IEpTT04ucGFyc2UoYXdhaXQgQ3JlYXRlVGV4dFVwbG9hZChDdXJyZW50VGV4dCgpLCB0ZW1wYmxvYi5zaXplLCBzaGExKHRleHQpKSkKICAgIGlmIChjcmVhdGUucmFwaWRfdXBsb2FkID09IHRydWUpIHsKICAgICAgICBhbGVydCgn572R55uY5YaF5a2Y5Zyo6K+l5paH5Lu277yBJykKICAgIH0KICAgIGxldCBjcmVhdGV1cmwgPSBjcmVhdGUucGFydF9pbmZvX2xpc3RbMF0udXBsb2FkX3VybAogICAgYXdhaXQgVXBsb2FkVGV4dEJpbihjcmVhdGV1cmwsIHRleHQpCgogICAgbGV0IGZpbmlzaHJldCA9IGF3YWl0IENvbXBsZXRlKGNyZWF0ZS51cGxvYWRfaWQsIGNyZWF0ZS5maWxlX2lkKQogICAgaWYgKGZpbmlzaHJldC5pbmRleE9mKCdmaWxlX2lkJykgPT0gLTEpIHsKICAgICAgICBhbGVydCgn5L+d5a2Y6Iez572R55uY5aSx6LSl77yBJykKICAgIH0KICAgIGZpbmlzaHJldCA9IEpTT04ucGFyc2UoZmluaXNocmV0KQogICAgbGV0IHNoYXJ1cmwgPSBHZXRGaWxlU2hhMUVuY3IoZmluaXNocmV0KQogICAgYWxlcnQoJ+S\/neWtmOiHs+e9keebmOaIkOWKn++8ge+8jOW3suiuvue9ruWIsOWJqui+keeJiCcpCiAgICBHTV9zZXRDbGlwYm9hcmQoc2hhcnVybCkKICAgIC8vZmlsZV9pZCBKU09OLnBhcnNlCgoKICAgIGNvbnNvbGUubG9nKCdVcGxvYWRUZXh0VG9BbGlZdW5wYW4nLCBmaW5pc2hyZXQpCn0KZnVuY3Rpb24gR2V0RGVjclRleHQodGV4dCkgewogICAgZGVidWdnZXI7CiAgICBpZiAodGV4dC5pbmRleE9mKCcxMTU6Ly8nKSAhPT0gLTEpIHsKICAgICAgICBsZXQgc2l6ZWxpc3QgPSB0ZXh0LnJlcGxhY2UoJzExNTovLycsICcnKS5zcGxpdCgnfCcpCiAgICAgICAgaWYgKHNpemVsaXN0Lmxlbmd0aCA8IDQpIHsKICAgICAgICAgICAgcmV0dXJuICdFcnJvcicKICAgICAgICB9CiAgICAgICAgaWYgKHNpemVsaXN0Lmxlbmd0aCA+IDQpIHsKICAgICAgICAgICAgdmFyIG4gPSBwYXJzZUludChzaXplbGlzdFsxXSk7CiAgICAgICAgICAgIGlmICghaXNOYU4obikpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IGNvbnRlbnRfaGFzaDogc2l6ZWxpc3RbMl0sIGNvbnRlbnRfdHlwZTogJ251bGwnLCBuYW1lOiBzaXplbGlzdFswXSwgc2l6ZTogc2l6ZWxpc3RbMV0gfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCB0ZW1wID0gdGV4dAogICAgICAgICAgICBsZXQgc2l6ZWxlbmd0aCA9IHRleHQucmVwbGFjZSgnMTE1Oi8vJywgJycpLnNwbGl0KCd8JykubGVuZ3RoIC0gNAogICAgICAgICAgICBmb3IgKGxldCBudW0gPSAwOyBudW0gPCBzaXplbGVuZ3RoOyBudW0rKykgewogICAgICAgICAgICAgICAgdGVtcCA9IHRlbXAucmVwbGFjZSgnfCcsICc9JykKICAgICAgICAgICAgfQogICAgICAgICAgICBzaXplbGlzdCA9IHRlbXAucmVwbGFjZSgnMTE1Oi8vJywgJycpLnNwbGl0KCd8JykKICAgICAgICB9CgoKICAgICAgICByZXR1cm4geyBjb250ZW50X2hhc2g6IHNpemVsaXN0WzJdLCBjb250ZW50X3R5cGU6ICdudWxsJywgbmFtZTogc2l6ZWxpc3RbMF0sIHNpemU6IHNpemVsaXN0WzFdIH0KICAgIH0KICAgIGlmICh0ZXh0LmluZGV4T2YoJ2FsaXl1bnBhbjo6JykgIT09IC0xKSB7CiAgICAgICAgbGV0IHNpemVsaXN0ID0gdGV4dC5yZXBsYWNlKCdhbGl5dW5wYW46OicsICcnKS5zcGxpdCgnfCcpCiAgICAgICAgaWYgKHNpemVsaXN0Lmxlbmd0aCAhPT0gNCkgewogICAgICAgICAgICByZXR1cm4gJ0Vycm9yJwogICAgICAgIH0KICAgICAgICByZXR1cm4geyBjb250ZW50X2hhc2g6IHNpemVsaXN0WzFdLCBjb250ZW50X3R5cGU6IHNpemVsaXN0WzNdLCBuYW1lOiBzaXplbGlzdFswXSwgc2l6ZTogc2l6ZWxpc3RbMl0gfQogICAgfQogICAgaWYgKHRleHQuaW5kZXhPZignYWxpeXVucGFuOi8vJykgIT09IC0xKSB7CiAgICAgICAgbGV0IHNpemVsaXN0ID0gdGV4dC5yZXBsYWNlKCdhbGl5dW5wYW46Ly8nLCAnJykuc3BsaXQoJ3wnKQogICAgICAgIGlmIChzaXplbGlzdC5sZW5ndGggIT09IDQpIHsKICAgICAgICAgICAgcmV0dXJuICdFcnJvcicKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsgY29udGVudF9oYXNoOiBzaXplbGlzdFsxXSwgY29udGVudF90eXBlOiBzaXplbGlzdFszXSwgbmFtZTogc2l6ZWxpc3RbMF0sIHNpemU6IHNpemVsaXN0WzJdIH0KICAgIH0KICAgIHRyeSB7CgogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUod2luZG93LmF0b2IodGV4dCkpKSkKICAgIH0KICAgIGNhdGNoIChlcnIpIHsKCiAgICAgICAgcmV0dXJuICdFcnJvcicKICAgIH0KCgoKfQpmdW5jdGlvbiBNdWxSZWFkaWFsb2dDcmVhdGUoKSB7CiAgICBpZiAoR2VuZXJhdGVTaG93ID09PSB0cnVlKSB7CiAgICAgICAgR2VuZXJhdGVTaG93ID0gZmFsc2U7CiAgICAgICAgR2VuZXJhdGVEaWFsb2dTaG93LnJlbW92ZSgpCiAgICB9CiAgICAvL+WvvOWFpeaWh+S7tgogICAgaWYgKEdlbmVyYXRlRmlsZUluU2hvdyA9PSB0cnVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgR2VuZXJhdGVGaWxlSW5TaG93ID0gdHJ1ZQogICAgR2VuZXJhdGVGaWxlaW5EaWFsb2dTaG93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgIHVuc2FmZVdpbmRvdy5SZWFkRmlsZUxpc3QgPSBSZWFkRmlsZUxpc3QKICAgIEdlbmVyYXRlRmlsZWluRGlhbG9nU2hvdy5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz0iYW50LW1vZGFsLWNvbnRlbnQiIHN0eWxlPSIgd2lkdGg6IDUwMHB4O3otaW5kZXg6IDk5O3Bvc2l0aW9uOiBhYnNvbHV0ZTt0b3A6IDUwcHg7bGVmdDogY2FsYyg1MCUgLSAyNTBweCk7Ij48ZGl2IGNsYXNzPSJhbnQtbW9kYWwtaGVhZGVyIj48aW5wdXQgaWQ9InVwbG9hZGZpbGUiIG9uY2hhbmdlPSJSZWFkRmlsZUxpc3QodGhpcykiIHR5cGU9ImZpbGUiICBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxkaXYgY2xhc3M9ImFudC1tb2RhbC10aXRsZSIgaWQ9InJjRGlhbG9nVGl0bGUwIj48ZGl2IGNsYXNzPSJpY29uLXdyYXBwZXItLTNkYmJvIiBzdHlsZT0iZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyO2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsiPjxzcGFuPuaWh+S7tuaJuemHj+WvvOWFpSjor7fli7\/lr7zlhaXml7blhbPpl60pPC9zcGFuPiAgICA8c3BhbiBkYXRhLXJvbGU9Imljb24iIGRhdGEtcmVuZGVyLWFzPSJzdmciIGRhdGEtaWNvbi10eXBlPSJQRFNDbG9zZSIgY2xhc3M9ImNsb3NlLWljb24tLTMzYlAwIGljb24tLWQtZWpBICIgc3R5bGU9IiAgICBjdXJzb3I6IHBvaW50ZXI7Ij48c3ZnIHZpZXdCb3g9IjAgMCAxMDI0IDEwMjQiPjx1c2UgeGxpbms6aHJlZj0iI1BEU0Nsb3NlIj48L3VzZT48L3N2Zz48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iYW50LW1vZGFsLWJvZHkiPjxkaXYgY2xhc3M9IiI+PGRpdiBjbGFzcz0iY292ZXItd3JhcHBlci0tMlVxUWIiIHN0eWxlPSJiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kX3NlY29uZGFyeV9ibHVyKTtmbGV4LWRpcmVjdGlvbjogY29sdW1uO2hlaWdodDogMTAwcHg7ZGlzcGxheTogZmxleDtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjthbGlnbi1pdGVtczogY2VudGVyOyIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pNi41NGEwNmM3NWVSandoSiI+PGRpdj7lpJrmlofku7bmibnph4\/lr7zlh7og5YWs5LyX5Y+3OjxzcGFuIHN0eWxlPSIgICAgY29sb3I6IGJsdWU7Ij7lj5vpgIbpnZLlubTml4XoiI08L3NwYW4+PC9kaXY+PGRpdj7kvZzogIU8c3BhbiBzdHlsZT0iICAgIGNvbG9yOiBibHVlOyIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pNy41NGEwNmM3NWVSandoSiI+5aSp5omN5bCR5bm05p2O5oGS6YGTPC9zcGFuPlFRPHNwYW4gc3R5bGU9IiAgICBjb2xvcjogYmx1ZTsiPjQ1NDgyMTI8IS0tICAgICAgICBzcGFuLS0+PC9zcGFuPjwvZGl2PjxkaXY+5rK554y05Lit5paH572RPHNwYW4gc3R5bGU9IiAgICBjb2xvcjogcmVkOyIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pNy41NGEwNmM3NWVSandoSiI+YmJzLnRhbXBlcm1vbmtleS5uZXQuY248L3NwYW4+PHNwYW4gc3R5bGU9IiAgICBjb2xvcjogYmx1ZTsiPjwhLS0gICAgICAgIHNwYW4tLT48L3NwYW4+PC9kaXY+PGRpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPSJGaWxlTGlzdE91dFNob3cgICAgICAgICAgICAiIHN0eWxlPSIgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxNTBweCk7ICAgIG92ZXJmbG93LXk6IHNjcm9sbDsgICAgcGFkZGluZzogNXB4IDIwcHg7ICAgIG1heC1oZWlnaHQ6IDMwMHB4OyIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pNy41NGEwNmM3NXV3N0Y1RSI+PC9kaXY+PGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDtmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7bWFyZ2luLXRvcDogMTBweDthbGlnbi1pdGVtczogY2VudGVyOyI+PGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTMuMzU2NzZjNzUxNXJsemoiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4O21hcmdpbi1yaWdodDogNXB4O2hlaWdodDogMzJweDsiPuW8gOWni+aPkOWPljwvZGl2PjxkaXYgY2xhc3M9ImJ1dHRvbi13cmFwcGVyLS0xVWtHNiIgZGF0YS10eXBlPSJwcmltYXJ5IiBkYXRhLXNwbS1hbmNob3ItaWQ9IjAuMC4wLmkzLjM1Njc2Yzc1MTVybHpqIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDVweDttYXJnaW4tcmlnaHQ6IDVweDtoZWlnaHQ6IDMycHg7Ij7lr7zlhaXmlofku7Y8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJTZWxlY3ROdW1TaG93Ij7lvZPliY3lt7LpgIk6PHNwYW4+MDwvc3Bhbj7pobk8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj5gCiAgICBHZW5lcmF0ZUZpbGVpbkRpYWxvZ1Nob3cub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIC8v5aSa6YCJ5YWz6Zet5Yig6ZmkCiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5vdXRlckhUTUwuaW5kZXhPZignI1BEU0Nsb3NlJykgIT0gLTEpIHsKICAgICAgICAgICAgVXBsb2FkbGlzdCA9IFtdCiAgICAgICAgICAgIEdlbmVyYXRlRmlsZUluU2hvdyA9IGZhbHNlOwogICAgICAgICAgICBHZW5lcmF0ZUZpbGVpbkRpYWxvZ1Nob3cucmVtb3ZlKCkKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5vdXRlckhUTUwuaW5kZXhPZign5a+85YWl5paH5Lu2JykgIT0gLTEpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVwbG9hZGZpbGUiKS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgICAgIFJlYWRGaWxlTGlzdCh0aGlzKQogICAgICAgICAgICB9OwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXBsb2FkZmlsZSIpLmNsaWNrKCk7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChldmVudC50YXJnZXQub3V0ZXJIVE1MLmluZGV4T2YoJ+W8gOWni+aPkOWPlicpICE9IC0xKSB7CiAgICAgICAgICAgIGFsZXJ0KCfmraPlnKjlvIDlp4vkuIrkvKDvvIzor7fli7\/ph43lpI3ngrnlh7vvvIEnKQogICAgICAgICAgICBTdGFydEFsbEZpbGUoKQoKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICB9CiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kKEdlbmVyYXRlRmlsZWluRGlhbG9nU2hvdykKfQpmdW5jdGlvbiBNdWxGaWxlRGlhbG9nQ3JlYXRlKCkgewogICAgaWYgKEdlbmVyYXRlRmlsZUluU2hvdyA9PSB0cnVlKSB7CiAgICAgICAgVXBsb2FkbGlzdCA9IFtdCiAgICAgICAgR2VuZXJhdGVGaWxlSW5TaG93ID0gZmFsc2U7CiAgICAgICAgR2VuZXJhdGVGaWxlaW5EaWFsb2dTaG93LnJlbW92ZSgpCiAgICB9CiAgICBpZiAoR2VuZXJhdGVTaG93ID09IHRydWUpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBHZW5lcmF0ZVNob3cgPSB0cnVlCiAgICBHZW5lcmF0ZURpYWxvZ1Nob3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgR2VuZXJhdGVEaWFsb2dTaG93LmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPSJhbnQtbW9kYWwtY29udGVudCIgc3R5bGU9IiB3aWR0aDogNTAwcHg7ei1pbmRleDogOTk7cG9zaXRpb246IGFic29sdXRlO3RvcDogNTBweDtsZWZ0OiBjYWxjKDUwJSAtIDI1MHB4KTsiPjxkaXYgY2xhc3M9ImFudC1tb2RhbC1oZWFkZXIiPjxkaXYgY2xhc3M9ImFudC1tb2RhbC10aXRsZSIgaWQ9InJjRGlhbG9nVGl0bGUwIj48ZGl2IGNsYXNzPSJpY29uLXdyYXBwZXItLTNkYmJvIiBzdHlsZT0iZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyO2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsiPjxzcGFuPuaWh+S7tuaJuemHj+WvvOWHujwvc3Bhbj4gICAgPHNwYW4gZGF0YS1yb2xlPSJpY29uIiBkYXRhLXJlbmRlci1hcz0ic3ZnIiBkYXRhLWljb24tdHlwZT0iUERTQ2xvc2UiIGNsYXNzPSJjbG9zZS1pY29uLS0zM2JQMCBpY29uLS1kLWVqQSAiIHN0eWxlPSIgICAgY3Vyc29yOiBwb2ludGVyOyI+PHN2ZyB2aWV3Qm94PSIwIDAgMTAyNCAxMDI0Ij48dXNlIHhsaW5rOmhyZWY9IiNQRFNDbG9zZSI+PC91c2U+PC9zdmc+PC9zcGFuPjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9ImFudC1tb2RhbC1ib2R5Ij48ZGl2IGNsYXNzPSIiPjxkaXYgY2xhc3M9ImNvdmVyLXdyYXBwZXItLTJVcVFiIiBzdHlsZT0iYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZF9zZWNvbmRhcnlfYmx1cik7ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtoZWlnaHQ6IDEwMHB4O2Rpc3BsYXk6IGZsZXg7anVzdGlmeS1jb250ZW50OiBjZW50ZXI7YWxpZ24taXRlbXM6IGNlbnRlcjsiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTYuNTRhMDZjNzVlUmp3aEoiPjxkaXY+5aSa5paH5Lu25om56YeP5a+85Ye6IOWFrOS8l+WPtzo8c3BhbiBzdHlsZT0iICAgIGNvbG9yOiBibHVlOyI+5Y+b6YCG6Z2S5bm05peF6IiNPC9zcGFuPjwvZGl2PjxkaXY+5L2c6ICFPHNwYW4gc3R5bGU9IiAgICBjb2xvcjogYmx1ZTsiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTcuNTRhMDZjNzVlUmp3aEoiPuWkqeaJjeWwkeW5tOadjuaBkumBkzwvc3Bhbj5RUTxzcGFuIHN0eWxlPSIgICAgY29sb3I6IGJsdWU7Ij40NTQ4MjEyPCEtLSAgICAgICAgc3Bhbi0tPjwvc3Bhbj48L2Rpdj48ZGl2PuayueeMtOS4reaWh+e9kTxzcGFuIHN0eWxlPSIgICAgY29sb3I6IHJlZDsiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTcuNTRhMDZjNzVlUmp3aEoiPmJicy50YW1wZXJtb25rZXkubmV0LmNuPC9zcGFuPjxzcGFuIHN0eWxlPSIgICAgY29sb3I6IGJsdWU7Ij48IS0tICAgICAgICBzcGFuLS0+PC9zcGFuPjwvZGl2PjxkaXY+PC9kaXY+PC9kaXY+PGRpdiBzdHlsZT0iYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZF9zZWNvbmRhcnlfYmx1cik7ZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyO3BhZGRpbmc6IDBweCA1MHB4O2p1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O3BhZGRpbmctYm90dG9tOiAxMHB4OyI+PGRpdj7mkJzntKLmlofku7Y8L2Rpdj48aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iU2VhcmNoTXVsRmlsZSIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pMS4zNTY3NmM3NTNIYm15ViIgdmFsdWU9IiI+PGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTMuMzU2NzZjNzUxNXJsemoiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4O21hcmdpbi1yaWdodDogNXB4O2hlaWdodDogMzJweDsiPuaQnOe0ojwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkZpbGVMaXN0T3V0U2hvdyAgICAgICAgICAgICIgc3R5bGU9IiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDE1MHB4KTsgICAgb3ZlcmZsb3cteTogc2Nyb2xsOyAgICBwYWRkaW5nOiA1cHggMjBweDsgICAgbWF4LWhlaWdodDogMzAwcHg7IiBkYXRhLXNwbS1hbmNob3ItaWQ9IjAuMC4wLmk3LjU0YTA2Yzc1dXc3RjVFIj4gICAgPC9kaXY+PGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDtmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7bWFyZ2luLXRvcDogMTBweDthbGlnbi1pdGVtczogY2VudGVyOyI+PGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTMuMzU2NzZjNzUxNXJsemoiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4O21hcmdpbi1yaWdodDogNXB4O2hlaWdodDogMzJweDsiPuS\/neWtmOiHs+e9keebmDwvZGl2PjxkaXYgY2xhc3M9ImJ1dHRvbi13cmFwcGVyLS0xVWtHNiIgZGF0YS10eXBlPSJwcmltYXJ5IiBkYXRhLXNwbS1hbmNob3ItaWQ9IjAuMC4wLmkzLjM1Njc2Yzc1MTVybHpqIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDVweDttYXJnaW4tcmlnaHQ6IDVweDtoZWlnaHQ6IDMycHg7Ij7lr7zlh7o8L2Rpdj48ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYiIGRhdGEtdHlwZT0icHJpbWFyeSIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pMy4zNTY3NmM3NTE1cmx6aiIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1cHg7bWFyZ2luLXJpZ2h0OiA1cHg7aGVpZ2h0OiAzMnB4OyI+5YWo6YOo6YCJ5oupPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2VsZWN0TnVtU2hvdyI+5b2T5YmN5YWxOjxzcGFuPjMzMDwvc3Bhbj7pobk8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj5gCiAgICBHZW5lcmF0ZURpYWxvZ1Nob3cub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIGRlYnVnZ2VyOwogICAgICAgIGNvbnNvbGUubG9nKCfljrvku5blpojnmoTlr7zlh7onLCBldmVudC50YXJnZXQpCiAgICAgICAgLy\/lpJrpgInlhbPpl63liKDpmaQKICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm91dGVySFRNTC5pbmRleE9mKCcjUERTQ2xvc2UnKSAhPSAtMSkgewogICAgICAgICAgICBHZW5lcmF0ZVNob3cgPSBmYWxzZTsKICAgICAgICAgICAgR2VuZXJhdGVEaWFsb2dTaG93LnJlbW92ZSgpCgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJUZXh0ID09ICflhajpg6jpgInmi6knKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5GaWxlTGlzdE91dFNob3cgPmRpdicpLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgICAgICBTZXRTZWxlY3RJdGVtKGl0ZW0sIHRydWUpCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5pbm5lclRleHQgPT0gJ+aQnOe0oicpIHsKICAgICAgICAgICAgU2VhcmNoRmlsZU11bEluc2VydChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT0iU2VhcmNoTXVsRmlsZSJdJykudmFsdWUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJUZXh0ID09ICfkv53lrZjoh7PnvZHnm5gnKSB7CiAgICAgICAgICAgIGxldCBvdXR0ZXh0ID0gJ+mYv+mHjOS6keayueeMtOaPkuS7tkJ5OuayueeMtOS4reaWh+eJiFxu5L2c6ICFOuWkqeaJjeWwkeW5tOadjuaBkumBk1FROjQ1NDgyMTJcbuWFrOS8l+WPtzrlj5vpgIbpnZLlubTml4XoiI1cbuayueeMtOS4reaWh+e9kTpiYnMudGFtcGVybW9ua2V5Lm5ldC5jblxuJwogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuRmlsZUxpc3RPdXRTaG93ID5kaXYnKS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hlY2tib3ggPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIG91dHRleHQgPSBvdXR0ZXh0ICsgaXRlbS5uYW1lICsgJ1xuJyArIGl0ZW0uZGF0ZSArICdcbicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgaWYgKG91dHRleHQgIT09ICfpmL\/ph4zkupHmsrnnjLTmj5Lku7ZCeTrmsrnnjLTkuK3mlofniYhcbuS9nOiAhTrlpKnmiY3lsJHlubTmnY7mgZLpgZNRUTo0NTQ4MjEyXG7lhazkvJflj7c65Y+b6YCG6Z2S5bm05peF6IiNXG7msrnnjLTkuK3mlofnvZE6YmJzLnRhbXBlcm1vbmtleS5uZXQuY25cbicpIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCflvIDlp4vov5vooYzkuIrkvKDvvIzor7fli7\/ph43lpI3ngrnlh7vvvIEnKQogICAgICAgICAgICAgICAgVXBsb2FkVGV4dFRvQWxpWXVucGFuKG91dHRleHQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBhbGVydCgn5pyq6YCJ5oup5Lu75L2V5paH5Lu2JykKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJUZXh0ID09ICflr7zlh7onKSB7CiAgICAgICAgICAgIGxldCBvdXR0ZXh0ID0gJ+mYv+mHjOS6keayueeMtOaPkuS7tkJ5OuayueeMtOS4reaWh+eJiFxu5L2c6ICFOuWkqeaJjeWwkeW5tOadjuaBkumBk1FROjQ1NDgyMTJcbuWFrOS8l+WPtzrlj5vpgIbpnZLlubTml4XoiI1cbuayueeMtOS4reaWh+e9kTpiYnMudGFtcGVybW9ua2V5Lm5ldC5jblxuJwogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuRmlsZUxpc3RPdXRTaG93ID5kaXYnKS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hlY2tib3ggPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIG91dHRleHQgPSBvdXR0ZXh0ICsgaXRlbS5uYW1lICsgJ1xuJyArIGl0ZW0uZGF0ZSArICdcbicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgaWYgKG91dHRleHQgIT09ICfpmL\/ph4zkupHmsrnnjLTmj5Lku7ZCeTrmsrnnjLTkuK3mlofniYhcbuS9nOiAhTrlpKnmiY3lsJHlubTmnY7mgZLpgZNRUTo0NTQ4MjEyXG7lhazkvJflj7c65Y+b6YCG6Z2S5bm05peF6IiNXG7msrnnjLTkuK3mlofnvZE6YmJzLnRhbXBlcm1vbmtleS5uZXQuY25cbicpIHsKICAgICAgICAgICAgICAgIGRvd25sb2FkKCflr7zlh7rmlofku7bmiJDlip9CeTrmsrnnjLTkuK3mlofnvZEudHh0Jywgb3V0dGV4dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfmnKrpgInmi6nku7vkvZXmlofku7YnKQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgIH0KICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmQoR2VuZXJhdGVEaWFsb2dTaG93KQogICAgU2VhcmNoRmlsZU11bEluc2VydCgnJykKfQpmdW5jdGlvbiBMb2FkRG93bmxvYWRUZXh0KHVybCkgewogICAgZGVidWdnZXI7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIC8vIkNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAiUmVmZXJlciI6ICJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vIiwKICAgICAgICAgICAgLy8gIkF1dGhvcml6YXRpb24iOiBhY2Nlc3N0b2tlbgogICAgICAgIH0sCiAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgICAgIGRlYnVnZ2VyOwogICAgICAgICAgICBNdWxSZWFkaWFsb2dDcmVhdGUoKQogICAgICAgICAgICBBZGRUZXh0KHhoci5yZXNwb25zZVRleHQpCiAgICAgICAgICAgIGFsZXJ0KCfop6PmnpDlrozmiJDvvIEnKQogICAgICAgICAgICBjb25zb2xlLmxvZygn6Kej5p6Q5paH5pys5YaF5a65IScsIHhoci5yZXNwb25zZVRleHQpCiAgICAgICAgfQogICAgfSk7Cgp9CmZ1bmN0aW9uIERvd25sb2FkVGV4dFJlYWQob2JqKSB7CiAgICBhbGVydCgn5byA5aeL6K+75Y+W5paH5Lu25YaF5a6577yM5pe26ZW\/5qC55o2u572R6YCf5Yaz5a6a77yM6K+35Yu\/6YeN5aSN54K55Ye7Jyk7CiAgICBjb25zb2xlLmxvZygn6I635Y+W6L+c56iL5a+56LGh5byA5aeLJywgb2JqKQogICAgbGV0IHVzZXJ1aWQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKS5kZWZhdWx0X2RyaXZlX2lkCiAgICBsZXQgdXBsb2FkdGV4dCA9ICd7ImRyaXZlX2lkIjoiJyArIHVzZXJ1aWQgKyAnIiwiZmlsZV9pZCI6IicgKyBvYmouZmlsZV9pZCArICcifScKICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICB1cmw6ICJodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vdjIvZmlsZS9nZXRfZG93bmxvYWRfdXJsIiwKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBkYXRhOiB1cGxvYWR0ZXh0LAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgIkNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAiUmVmZXJlciI6ICJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vIiwKICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBhY2Nlc3N0b2tlbgogICAgICAgIH0sCiAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgaWYgKGpzb24udXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfojrflj5bkuIvovb3lnLDlnYDlpLHotKXvvIEnKQogICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgfQogICAgICAgICAgICBMb2FkRG93bmxvYWRUZXh0KGpzb24udXJsKQogICAgICAgIH0KICAgIH0pOwoKICAgIC8vTXVsUmVhZGlhbG9nQ3JlYXRlKCkKfQphc3luYyBmdW5jdGlvbiBVcGxvYWRPbmUobnVtKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIGxldCBvYmogPSBVcGxvYWRsaXN0W251bV0KICAgICAgICBsZXQgdGV4dCA9IEdldERlY3JUZXh0KG9iai5kYXRlKQogICAgICAgIGxldCB1c2VydWlkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSkuZGVmYXVsdF9kcml2ZV9pZAogICAgICAgIGxldCB1cGxvYWR0ZXh0ID0gJ3siZHJpdmVfaWQiOiInICsgdXNlcnVpZCArICciLCJwYXJ0X2luZm9fbGlzdCI6W3sicGFydF9udW1iZXIiOjF9XSwicGFyZW50X2ZpbGVfaWQiOiInICsgcGFyZW50X2ZpbGVfaWQgKyAnIiwibmFtZSI6IicgKyB0ZXh0Lm5hbWUgKyAnIiwidHlwZSI6ImZpbGUiLCJjaGVja19uYW1lX21vZGUiOiJhdXRvX3JlbmFtZSIsInNpemUiOicgKyB0ZXh0LnNpemUgKyAnLCJjb250ZW50X2hhc2giOiInICsgdGV4dC5jb250ZW50X2hhc2ggKyAnIiwiY29udGVudF9oYXNoX25hbWUiOiJzaGExIn0nCiAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICB1cmw6ICJodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vdjIvZmlsZS9jcmVhdGUiLAogICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgZGF0YTogdXBsb2FkdGV4dCwKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgIkNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiBhY2Nlc3N0b2tlbgogICAgICAgICAgICB9LAogICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgIGlmIChqc29uLnJhcGlkX3VwbG9hZCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgU3VjY2VzcysrOwogICAgICAgICAgICAgICAgICAgIFNldFNlbGVjdEl0ZW0ob2JqLCB0cnVlLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdzdWNjZXNzJyk7CgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgRmFpbGUrKzsKICAgICAgICAgICAgICAgICAgICBTZXRTZWxlY3RJdGVtKG9iaiwgZmFsc2UsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ2ZhaWxlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwp9CmFzeW5jIGZ1bmN0aW9uIFN0YXJ0QWxsRmlsZSgpIHsKICAgIFVwbG9hZGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuRmlsZUxpc3RPdXRTaG93ID5kaXYnKQogICAgU3VjY2VzcyA9IDA7CiAgICBGYWlsZSA9IDA7CiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgVXBsb2FkbGlzdC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICBpZiAoVXBsb2FkbGlzdFtpbmRleF0uY2hlY2tib3ggPT09IGZhbHNlKSB7CiAgICAgICAgICAgIGF3YWl0IFVwbG9hZE9uZShpbmRleCkKICAgICAgICB9CgogICAgfQogICAgYWxlcnQoJ+S4iuS8oOWujOavlSzmiJDlip\/kuoY6JyArIFN1Y2Nlc3MgKyAn5Liq5paH5Lu2LOWksei0peS6hjonICsgRmFpbGUgKyAn5paH5Lu2JykKICAgIHVuc2FmZVdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKCgp9CmZ1bmN0aW9uIEFkZFRleHQodGV4dCkgewogICAgbGV0IGxpc3QgPSB0ZXh0LnNwbGl0KCdcbicpCiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICBsZXQgcm93dGV4dCA9IGxpc3RbaW5kZXhdCiAgICAgICAgaWYgKHJvd3RleHQuaW5kZXhPZignZXlKdScpICE9IC0xIHx8IHJvd3RleHQuaW5kZXhPZignYWxpeXVucGFuOi8vJykgIT0gLTEgfHwgcm93dGV4dC5pbmRleE9mKCdhbGl5dW5wYW46OicpICE9IC0xIHx8IHJvd3RleHQuaW5kZXhPZignMTE1Oi8vJykgIT0gLTEpIHsKICAgICAgICAgICAgbGV0IHRlbXAgPSBHZXREZWNyVGV4dChyb3d0ZXh0KQogICAgICAgICAgICBpZiAodGVtcC5jb250ZW50X2hhc2ggPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBhbGVydCgn5a2Y5Zyo5paH5Lu25LiN5q2j56K677yB5bey6Lez6YGO6Kmy5paH5Lu277yBJykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxldCBGaWxlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpCiAgICAgICAgICAgICAgICB0b3RhbG51bSArPSAxCiAgICAgICAgICAgICAgICBTZXRUb3RhbG51bSgpCiAgICAgICAgICAgICAgICBGaWxlSXRlbS5jaGVja2JveCA9IGZhbHNlOwogICAgICAgICAgICAgICAgRmlsZUl0ZW0uZGF0ZSA9IHJvd3RleHQKICAgICAgICAgICAgICAgIEZpbGVJdGVtLm5hbWUgPSB0ZW1wLm5hbWUKICAgICAgICAgICAgICAgIEZpbGVJdGVtLmlubmVySFRNTCA9ICc8ZGl2IHN0eWxlPSJkaXNwbGF5OiBmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXI7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyI+ICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTYwcHg7b3ZlcmZsb3c6IGhpZGRlbjt0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczt3aGl0ZS1zcGFjZTogbm93cmFwOyI+JyArIHRlbXAubmFtZSArICc8L2Rpdj48ZGl2IHN0eWxlPSJmbGV4LWdyb3c6IDE7dGV4dC1hbGlnbjogY2VudGVyOyI+JyArIHRlbXAuc2l6ZSArICc8L2Rpdj48ZGl2IGNsYXNzPSJjaGVja2JveC0tTk93RV8gY2hlY2tib3gtY29udGFpbmVyLS1UTm5kdyIgcm9sZT0iY2hlY2tib3giIGFyaWEtY2hlY2tlZD0iZmFsc2UiIGRhdGEtY2hlY2tlZD0iZmFsc2UiIGRhdGEtcGFydGlhbD0idHJ1ZSIgZGF0YS1kaXNhYmxlZD0iZmFsc2UiIGRhdGEtbm8tcGFkZGluZz0iZmFsc2UiIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDBweDsiPjxkaXYgY2xhc3M9ImNoZWNrYm94LS0xMURQciIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pMTAuNTRhMDZjNzV1dzdGNUUiPjwvZGl2PjwvZGl2PjxkaXY+PC9kaXY+PC9kaXY+JwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkZpbGVMaXN0T3V0U2hvdycpLmFwcGVuZChGaWxlSXRlbSkKCiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgfQogICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5GaWxlTGlzdE91dFNob3cgPmRpdicpLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgYWxlcnQoJ+aJvuS4jeWIsOWIhuS6q+egge+8gScpCiAgICB9CgoKCn0KZnVuY3Rpb24gUmVhZEZpbGVMaXN0KGV2dCkgewogICAgdG90YWxudW0gPSAwCiAgICBTZXRUb3RhbG51bSgpCiAgICBsZXQgZmlsZXMgPSBldnQuZmlsZXMKICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgbGV0IGZpbGUgPSBmaWxlc1swXTsKICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKICAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4gewogICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVhZGVyLnJlc3VsdDsKICAgICAgICAgICAgQWRkVGV4dChyZXN1bHQpCiAgICAgICAgfTsKCiAgICB9Cgp9CmZ1bmN0aW9uIGRvd25sb2FkKGZpbGVuYW1lLCB0ZXh0KSB7CiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdocmVmJywgJ2RhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04LCcgKyBlbmNvZGVVUklDb21wb25lbnQodGV4dCkpOwogICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpOwoKICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CgogICAgZWxlbWVudC5jbGljaygpOwoKICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7Cn0KZnVuY3Rpb24gdXBsb2FkYWRkZWQoZXZlbnQpIHsKfQpmdW5jdGlvbiBTZXRUb3RhbG51bSgpIHsKICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5TZWxlY3ROdW1TaG93IHNwYW4nKS5pbm5lclRleHQgPSB0b3RhbG51bQp9CmZ1bmN0aW9uIFNldFNlbGVjdEl0ZW0oaXRlbSwgY2hlY2ssIGNoYW5nZSA9IHRydWUpIHsKICAgIGlmIChpdGVtLmNoZWNrYm94ID09PSBjaGVjaykgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChpdGVtLmNoZWNrYm94ID09PSBmYWxzZSkgewogICAgICAgIGl0ZW0uY2hlY2tib3ggPSB0cnVlCiAgICAgICAgaWYgKGNoYW5nZSA9PSB0cnVlKSB7CiAgICAgICAgICAgIHRvdGFsbnVtICs9IDEKICAgICAgICAgICAgU2V0VG90YWxudW0oKQogICAgICAgIH0KCiAgICAgICAgaXRlbS5jaGlsZHJlblswXS5jaGlsZHJlblsyXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcsICd0cnVlJykKICAgICAgICBpdGVtLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzJdLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSJjaGVja2JveC0tMTFEUHIiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTEwLjU0YTA2Yzc1dXc3RjVFIj48c3ZnIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgdmlld0JveD0iMCAwIDE2IDE2IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPjxwYXRoIGQ9Ik0xMi42MjQ3IDUuMjk5NzRMNy4yNjYzNyAxMS45OTc3TDMuODM0MzUgOC41NjU2N0w0Ljk2NTcyIDcuNDM0M0w3LjEzMzcgOS42MDIyOEwxMS4zNzUzIDQuMzAwMjNMMTIuNjI0NyA1LjI5OTc0WiI+PC9wYXRoPjwvc3ZnPjwvZGl2PicKICAgIH0KICAgIGVsc2UgewogICAgICAgIGl0ZW0uY2hlY2tib3ggPSBmYWxzZQogICAgICAgIGlmIChjaGFuZ2UgPT0gdHJ1ZSkgewogICAgICAgICAgICB0b3RhbG51bSAtPSAxCiAgICAgICAgICAgIFNldFRvdGFsbnVtKCkKICAgICAgICB9CgogICAgICAgIGl0ZW0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMl0uc2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnLCAnZmFsc2UnKQogICAgICAgIGl0ZW0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMl0uaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9ImNoZWNrYm94LS0xMURQciIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pMTAuNTRhMDZjNzV1dzdGNUUiPjwvZGl2PicKICAgIH0KfQpmdW5jdGlvbiBTZWFyY2hGaWxlTXVsSW5zZXJ0KHRleHQpIHsKICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5GaWxlTGlzdE91dFNob3cnKS5pbm5lclRleHQgPSAnJwogICAgdG90YWxudW0gPSAwCiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgRmlsZUxpc3QubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgbGV0IHRlbXBsaXN0ID0gRmlsZUxpc3RbaW5kZXhdCiAgICAgICAgZm9yIChsZXQgaW5uZXJpbmRleCA9IDA7IGlubmVyaW5kZXggPCB0ZW1wbGlzdC5saXN0Lmxlbmd0aDsgaW5uZXJpbmRleCsrKSB7CiAgICAgICAgICAgIGxldCB0ZW1wb2JqID0gdGVtcGxpc3QubGlzdFtpbm5lcmluZGV4XQoKICAgICAgICAgICAgaWYgKHRlbXBvYmoudHlwZSAhPT0gJ2ZvbGRlcicpIHsKICAgICAgICAgICAgICAgIGlmICh0ZXh0ID09PSAnJyB8fCB0ZW1wb2JqLm5hbWUuaW5kZXhPZih0ZXh0KSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgIGxldCBGaWxlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpCiAgICAgICAgICAgICAgICAgICAgRmlsZUl0ZW0uY2hlY2tib3ggPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBGaWxlSXRlbS5kYXRlID0gR2V0RmlsZVNoYTFFbmNyKHRlbXBvYmopCiAgICAgICAgICAgICAgICAgICAgRmlsZUl0ZW0ubmFtZSA9IHRlbXBvYmoubmFtZQogICAgICAgICAgICAgICAgICAgIEZpbGVJdGVtLmlubmVySFRNTCA9ICc8ZGl2IHN0eWxlPSJkaXNwbGF5OiBmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXI7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyI+ICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTYwcHg7b3ZlcmZsb3c6IGhpZGRlbjt0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczt3aGl0ZS1zcGFjZTogbm93cmFwOyI+JyArIHRlbXBvYmoubmFtZSArICc8L2Rpdj48ZGl2IHN0eWxlPSJmbGV4LWdyb3c6IDE7dGV4dC1hbGlnbjogY2VudGVyOyI+JyArIHRlbXBvYmouc2l6ZSArICc8L2Rpdj48ZGl2IGNsYXNzPSJjaGVja2JveC0tTk93RV8gY2hlY2tib3gtY29udGFpbmVyLS1UTm5kdyIgcm9sZT0iY2hlY2tib3giIGFyaWEtY2hlY2tlZD0iZmFsc2UiIGRhdGEtY2hlY2tlZD0iZmFsc2UiIGRhdGEtcGFydGlhbD0idHJ1ZSIgZGF0YS1kaXNhYmxlZD0iZmFsc2UiIGRhdGEtbm8tcGFkZGluZz0iZmFsc2UiIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDBweDsiPjxkaXYgY2xhc3M9ImNoZWNrYm94LS0xMURQciIgZGF0YS1zcG0tYW5jaG9yLWlkPSIwLjAuMC5pMTAuNTRhMDZjNzV1dzdGNUUiPjwvZGl2PjwvZGl2PjxkaXY+PC9kaXY+PC9kaXY+JwogICAgICAgICAgICAgICAgICAgIEZpbGVJdGVtLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5vdXRlckhUTUwuaW5kZXhPZignY2hlY2tib3gnKSAhPT0gLTEgfHwgZXZlbnQudGFyZ2V0Lm91dGVySFRNTC5pbmRleE9mKCdNMTIuNjI0NyA1LjI5OTc0TDcuMjY2MzcnKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldFNlbGVjdEl0ZW0oRmlsZUl0ZW0sICFGaWxlSXRlbS5jaGVja2JveCkKCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5GaWxlTGlzdE91dFNob3cnKS5hcHBlbmQoRmlsZUl0ZW0pCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CgogICAgICAgIH0KICAgIH0KCiAgICBTZXRUb3RhbG51bSgpCgp9CmZ1bmN0aW9uIFNob3dUb2FzdCh0ZXh0LCB0aW1lID0gMzAwMCkgewogICAgbGV0IHRvYXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgIHRvYXN0LmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSJhRHJpdmUiPjxkaXY+PGRpdiBjbGFzcz0iYURyaXZlLW5vdGljZSI+PGRpdiBjbGFzcz0iYURyaXZlLW5vdGljZS1jb250ZW50Ij48ZGl2IGNsYXNzPSJhRHJpdmUtY3VzdG9tLWNvbnRlbnQgYURyaXZlLWluZm8iPjxkaXY+PC9kaXY+PHNwYW4+PGRpdiBjbGFzcz0iY29udGVudC13cmFwcGVyLS1CN21BRyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4OyAvKiEgcGFkZGluZy1yaWdodDogODRweDsgKi8iIGRhdGEtZGVzYz0iZmFsc2UiPjxkaXYgY2xhc3M9InRpdGxlLXdyYXBwZXItLTNiUVEyIj4nICsgdGV4dCArICc8ZGl2IGNsYXNzPSJkZXNjLXdyYXBwZXItLTIxOHgwIj48L2Rpdj48L2Rpdj48L2Rpdj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JwogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZCh0b2FzdCkKICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgdG9hc3QucmVtb3ZlKCkgfSwgdGltZSk7Cgp9CmZ1bmN0aW9uIFJlZnJlc2hUb2tlbigpIHsKICAgIGlmIChhY2Nlc3N0b2tlbiAhPT0gJycpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgdXJsOiAiaHR0cHM6Ly93ZWJzdi5hbGl5dW5kcml2ZS5jb20vdG9rZW4vcmVmcmVzaCIsCiAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgZGF0YTogJ3sicmVmcmVzaF90b2tlbiI6ICInICsgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSkucmVmcmVzaF90b2tlbiArICcifScsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAiQ29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCIsCiAgICAgICAgfSwKICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICBhY2Nlc3N0b2tlbiA9IGpzb24uYWNjZXNzX3Rva2VuCiAgICAgICAgICAgIGlmIChhY2Nlc3N0b2tlbiAhPT0gdW5kZWZpbmVkICYmIGFjY2Vzc3Rva2VuICE9ICcnKSB7CgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgU2hvd1RvYXN0KCfop6PmnpBBY2Vzc19Ub2tlbuWksei0pSEnKQoKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwp9CmZ1bmN0aW9uIENyZWF0ZVNoYXJlQ2xpcCh0ZW1wb2JqKSB7CiAgICBTaG93RmlsZU9iai5uYW1lID0gdGVtcG9iai5uYW1lOwogICAgU2hvd0ZpbGVPYmouY29udGVudF9oYXNoID0gdGVtcG9iai5jb250ZW50X2hhc2g7CiAgICBTaG93RmlsZU9iai5zaXplID0gdGVtcG9iai5zaXplOwogICAgU2hvd0ZpbGVPYmouY29udGVudF90eXBlID0gdGVtcG9iai5jb250ZW50X3R5cGU7CiAgICBTaG93RmlsZU9iai5maWxlX2lkID0gdGVtcG9iai5maWxlX2lkOwogICAgbGV0IHJldCA9IGNvbmZpcm0oJ+aWh+S7tuWQjTonICsgU2hvd0ZpbGVPYmoubmFtZSArICdcbuagoemqjOWAvDonICsgU2hvd0ZpbGVPYmouY29udGVudF9oYXNoICsgJ1xu5paH5Lu25aSn5bCPOicgKyBTaG93RmlsZU9iai5zaXplICsgJ1xuJyArCiAgICAgICAgJ+eCueWHu+ehruWumuiHquWKqOa3u+WKoOWIhuS6q+eggeWIsOWJqui+keeJiFxu5p2l6Ieq5rK554y05Lit5paH572RYmJzLnRhbXBlcm1vbmtleS5uZXQuY25cbuWFrOS8l+WPtzrlj5vpgIbpnZLlubTml4XoiI0nKTsKICAgIGlmIChyZXQgPT0gdHJ1ZSkgewogICAgICAgIHRyeSB7CgogICAgICAgICAgICBHTV9zZXRDbGlwYm9hcmQoR2V0RmlsZVNoYTFFbmNyKHRlbXBvYmopKQogICAgICAgICAgICBhbGVydCgn5paH5Lu25bey6K6+572u5Yiw5Ymq6L6R54mI77yBJykKICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGVycikgewoKICAgICAgICAgICAgYWxlcnQoJ+aWh+S7tuWQjeWtl+WPr+iDveWtmOWcqOeJueauiuWFs+mUruWtl++8jOivt+aUueWQjemHjeivlScpCiAgICAgICAgfQoKICAgIH0KfQpmdW5jdGlvbiBTdGFydExpc3RuZXIoKSB7CgoKICAgIHNldEludGVydmFsKGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIGlmIChDcmVhdGVTYXZlQnRuID09PSBmYWxzZSkgewogICAgICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2NsYXNzfD1oZWFkZXJdJykKICAgICAgICAgICAgaWYgKGhlYWRlciAhPT0gbnVsbCAmJiBoZWFkZXIuY2hpbGRFbGVtZW50Q291bnQgPT09IDIgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2NsYXNzfD1oZWFkZXJdJykuY2hpbGRyZW5bMV0uaW5uZXJUZXh0LmluZGV4T2YoJ+aPkOWPluWIhuS6q+eggScpID09PSAtMSkgewogICAgICAgICAgICAgICAgbGV0IEdlbmVyYXRlU2hhcmVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgICAgICAgICAgICAgR2VuZXJhdGVTaGFyZUJ0bi5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIGRhdGEtc3BtLWFuY2hvci1pZD0iMC4wLjAuaTMuMzU2NzZjNzUxNXJsemoiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4OyJtYXJnaW4tcmlnaHQ6NXB4OyI+5o+Q5Y+W5YiG5Lqr56CBPC9kaXY+JwogICAgICAgICAgICAgICAgR2VuZXJhdGVTaGFyZUJ0bi5vbmNsaWNrID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gcHJvbXB0KCLor7fovpPlhaXliIbkuqvnoIEiLCAiIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBHZXREZWNyVGV4dCh0ZXh0KQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn6Kej5p6Q5o+Q5Y+W56CB5aSx6LSl77yBJykKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5jb250ZW50X2hhc2ggPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfmj5Dlj5bnoIHkuI3mraPnoa7vvIEnKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjY2Vzc3Rva2VuID09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn6K6\/6ZeuVG9rZW7lvILluLjvvIEnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VydWlkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSkuZGVmYXVsdF9kcml2ZV9pZAogICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXBsb2FkdGV4dCA9ICd7ImRyaXZlX2lkIjoiJyArIHVzZXJ1aWQgKyAnIiwicGFydF9pbmZvX2xpc3QiOlt7InBhcnRfbnVtYmVyIjoxfV0sInBhcmVudF9maWxlX2lkIjoiJyArIHBhcmVudF9maWxlX2lkICsgJyIsIm5hbWUiOiInICsgdGV4dC5uYW1lICsgJyIsInR5cGUiOiJmaWxlIiwiY2hlY2tfbmFtZV9tb2RlIjoiYXV0b19yZW5hbWUiLCJzaXplIjonICsgdGV4dC5zaXplICsgJywiY29udGVudF9oYXNoIjoiJyArIHRleHQuY29udGVudF9oYXNoICsgJyIsImNvbnRlbnRfaGFzaF9uYW1lIjoic2hhMSJ9JwoKCiAgICAgICAgICAgICAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpLmFsaXl1bmRyaXZlLmNvbS92Mi9maWxlL2NyZWF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHVwbG9hZHRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBdXRob3JpemF0aW9uIjogYWNjZXNzdG9rZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb24ucmFwaWRfdXBsb2FkID09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuaPkOWPluaWh+S7tuaIkOWKn++8gSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLmj5Dlj5bmlofku7blpLHotKXvvIEiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgR2VuZXJhdGVGaWxlT3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgICAgICAgICAgICAgIEdlbmVyYXRlRmlsZU91dC5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4OyJtYXJnaW4tcmlnaHQ6NXB4OyI+5aSa5paH5Lu25YiG5LqrPC9kaXY+JwogICAgICAgICAgICAgICAgR2VuZXJhdGVGaWxlT3V0Lm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgTXVsRmlsZURpYWxvZ0NyZWF0ZSgpCgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IEdlbmVyYXRlRmlsZUluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKICAgICAgICAgICAgICAgIEdlbmVyYXRlRmlsZUluLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYiIGRhdGEtdHlwZT0icHJpbWFyeSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1cHg7Im1hcmdpbi1yaWdodDo1cHg7Ij7lpJrmlofku7bmj5Dlj5Y8L2Rpdj4nCiAgICAgICAgICAgICAgICBHZW5lcmF0ZUZpbGVJbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIE11bFJlYWRpYWxvZ0NyZWF0ZSgpCgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IEdlbmVyYXRlVG9rZW5GaWxlSW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgICAgICAgICAgICAgR2VuZXJhdGVUb2tlbkZpbGVJbi5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IiBkYXRhLXR5cGU9InByaW1hcnkiIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4OyJtYXJnaW4tcmlnaHQ6NXB4OyI+VG9rZW48L2Rpdj4nCiAgICAgICAgICAgICAgICBHZW5lcmF0ZVRva2VuRmlsZUluLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHRva2VuSW5mbyA9ICJpZDoiICsgIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpLmRlZmF1bHRfZHJpdmVfaWQ7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5JbmZvICs9ICJcbnRva2VuOiIgKyAgYWNjZXNzdG9rZW47CiAgICAgICAgICAgICAgICAgICAgdG9rZW5JbmZvICs9ICJcbnJlZnJlc2hfdG9rZW46IiArIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpLnJlZnJlc2hfdG9rZW47CiAgICAgICAgICAgICAgICAgICAgYWxlcnQodG9rZW5JbmZvKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzc3w9aGVhZGVyXScpLmNoaWxkcmVuWzFdLmFwcGVuZChHZW5lcmF0ZVNoYXJlQnRuKQogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2NsYXNzfD1oZWFkZXJdJykuY2hpbGRyZW5bMV0uYXBwZW5kKEdlbmVyYXRlRmlsZU91dCkKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzc3w9aGVhZGVyXScpLmNoaWxkcmVuWzFdLmFwcGVuZChHZW5lcmF0ZUZpbGVJbikKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzc3w9aGVhZGVyXScpLmNoaWxkcmVuWzFdLmFwcGVuZChHZW5lcmF0ZVRva2VuRmlsZUluKQogICAgICAgICAgICB9CgogICAgICAgIH0KICAgICAgICAvL2luZm8td3JhcHBlci0tCiAgICAgICAgbGV0IGZvcm1saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFudC1tb2RhbC1ib2R5JykKICAgICAgICBmb3IgKGxldCBmb3JtaW5lZHggPSAwOyBmb3JtaW5lZHggPCBmb3JtbGlzdC5sZW5ndGg7IGZvcm1pbmVkeCsrKSB7CiAgICAgICAgICAgIGxldCBmb3JtID0gZm9ybWxpc3RbZm9ybWluZWR4XQogICAgICAgICAgICBpZiAoZm9ybS5vZmZzZXRXaWR0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIGlmIChmb3JtICE9IG51bGwgJiYgZm9ybS5pbm5lckhUTUwuaW5kZXhPZign6K+m57uG5L+h5oGvJykgIT0gLTEpIHsKICAgICAgICAgICAgICAgIGlmIChmb3JtLmlubmVySFRNTC5pbmRleE9mKCfliJvlu7rml7bpl7QnKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBmb3JtLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmFsdAogICAgICAgICAgICAgICAgICAgIGlmIChpbWcgIT09IG51bGwgJiYgaW1nID09PSAiZm9sZGVyIikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFudC1tb2RhbC1ib2R5JykuaW5uZXJUZXh0LmluZGV4T2YoJ+eUn+aIkOWIhuS6qycpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFudC1tb2RhbC1ib2R5IFtkYXRhLXR5cGU9InByaW1hcnkiXScpLnJlbW92ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW50LW1vZGFsLWJvZHkgW2RhdGEtdHlwZT0icHJpbWFyeSJdJykucmVtb3ZlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvKmlmKGltZyE9PW51bGwmJmltZy5hbHQ9PT0idGV4dCIpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5uZXJ0ZXh0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbnQtbW9kYWwtYm9keScpLmlubmVyVGV4dAogICAgICAgICAgICAgICAgICAgICAgICBpZihpbm5lcnRleHQuaW5kZXhPZign55Sf5oiQ5YiG5LqrJykhPT0tMSYmaW5uZXJ0ZXh0LmluZGV4T2YoJ+i\/nOeoi+aPkOWPlicpPT09LTEpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaW5nd2VpJykuc3R5bGUuZGlzcGxheT0nZmxleCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaW5nd2VpJykuaW5uZXJIVE1MPSc8ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYgRnVja05ldFRleHRDaGlsZCIgZGF0YS10eXBlPSJwcmltYXJ5Ij7nlJ\/miJDliIbkuqs8L2Rpdj48ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYgRnVja05ldFRleHRDaGlsZCIgZGF0YS10eXBlPSJwcmltYXJ5IiBzdHlsZT0iIG1hcmdpbi1sZWZ0OiA1cHg7Ij7ov5znqIvmj5Dlj5Y8L2Rpdj4nCgogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0qLwoKICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybS5pbm5lckhUTUwuaW5kZXhPZign55Sf5oiQ5YiG5LqrJykgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IEdlbmVyYXRlRmlsZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgICAgICAgICAgICAgICAgICAgICBHZW5lcmF0ZUZpbGVEYXRlLnN0eWxlLmRpc3BsYXkgPSAnZmxleCcKICAgICAgICAgICAgICAgICAgICAgICAgR2VuZXJhdGVGaWxlRGF0ZS5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IEZ1Y2tOZXRUZXh0Q2hpbGQiIGRhdGEtdHlwZT0icHJpbWFyeSI+55Sf5oiQ5YiG5LqrPC9kaXY+PGRpdiBjbGFzcz0iYnV0dG9uLXdyYXBwZXItLTFVa0c2IEZ1Y2tOZXRUZXh0Q2hpbGQiIGRhdGEtdHlwZT0icHJpbWFyeSIgc3R5bGU9IiBtYXJnaW4tbGVmdDogNXB4OyI+6L+c56iL5o+Q5Y+WPC9kaXY+JwogICAgICAgICAgICAgICAgICAgICAgICAvKmlmKGltZy5hbHQ9PT0idGV4dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdlbmVyYXRlRmlsZURhdGUuc3R5bGUuZGlzcGxheT0nZmxleCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdlbmVyYXRlRmlsZURhdGUuaW5uZXJIVE1MPSc8ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYgRnVja05ldFRleHRDaGlsZCIgZGF0YS10eXBlPSJwcmltYXJ5Ij7nlJ\/miJDliIbkuqs8L2Rpdj48ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYgRnVja05ldFRleHRDaGlsZCIgZGF0YS10eXBlPSJwcmltYXJ5IiBzdHlsZT0iIG1hcmdpbi1sZWZ0OiA1cHg7Ij7ov5znqIvmj5Dlj5Y8L2Rpdj4nCgogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdlbmVyYXRlRmlsZURhdGUuaW5uZXJIVE1MPSc8ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlci0tMVVrRzYgRnVja05ldFRleHRDaGlsZCIgZGF0YS10eXBlPSJwcmltYXJ5Ij7nlJ\/miJDliIbkuqs8L2Rpdj4nCiAgICAgICAgICAgICAgICAgICAgICAgIH0qLwogICAgICAgICAgICAgICAgICAgICAgICBHZW5lcmF0ZUZpbGVEYXRlLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5pbm5lclRleHQgPT0gJ+eUn+aIkOWIhuS6qycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbnQtbW9kYWwtY29udGVudCBbY2xhc3N8PXRpdGxlLXdyYXBwZXJdJykuaW5uZXJUZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IEZpbGVMaXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcGxpc3QgPSBGaWxlTGlzdFtpbmRleF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5uZXJpbmRleCA9IDA7IGlubmVyaW5kZXggPCB0ZW1wbGlzdC5saXN0Lmxlbmd0aDsgaW5uZXJpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcG9iaiA9IHRlbXBsaXN0Lmxpc3RbaW5uZXJpbmRleF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcG9iai50eXBlICE9PSAnZm9sZGVyJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wb2JqLm5hbWUgPT09IG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlU2hhcmVDbGlwKHRlbXBvYmopCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJUZXh0ID09ICfov5znqIvmj5Dlj5YnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW50LW1vZGFsLWNvbnRlbnQgW2NsYXNzfD10aXRsZS13cmFwcGVyXScpLmlubmVyVGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBGaWxlTGlzdC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBsaXN0ID0gRmlsZUxpc3RbaW5kZXhdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGlubmVyaW5kZXggPSAwOyBpbm5lcmluZGV4IDwgdGVtcGxpc3QubGlzdC5sZW5ndGg7IGlubmVyaW5kZXgrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBvYmogPSB0ZW1wbGlzdC5saXN0W2lubmVyaW5kZXhdCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBvYmoudHlwZSAhPT0gJ2ZvbGRlcicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcG9iai5uYW1lID09PSBuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wb2JqLmZpbGVfZXh0ZW5zaW9uID09PSAidHh0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+afpeeci+aWh+S7ticsIHRlbXBvYmopCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcG9iai5zaXplID4gdXBsb2Fkc2l6ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfor6XmlofmnKzmlofmoaPnmoTlpKflsI\/ov4flpKch5peg5rOV5L2\/55So6K+l5Yqf6IO9JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9ImRvY3VtZW50Il0gW2RhdGEtaWNvbi10eXBlPSJQRFNDbG9zZSJdJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGVtbGlzdC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtbGlzdFtpbmRleF0uY2xpY2soKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZFRleHRSZWFkKHRlbXBvYmopCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+ivpeaWh+S7tuS4jeaYr+aWh+acrOaWh+S7tu+8gScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBXcmFwcGVyTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tjbGFzc3w9Z3JvdXAtd3JhcHBlcl0nKQogICAgICAgICAgICAgICAgICAgICAgICBXcmFwcGVyTGlzdFtXcmFwcGVyTGlzdC5sZW5ndGggLSAxXS5hcHBlbmQoR2VuZXJhdGVGaWxlRGF0ZSkKCiAgICAgICAgICAgICAgICAgICAgfQoKCgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICB9CgogICAgICAgIH0KICAgIH0sIDE1MDApOwoKCn0KaWYgKHVuc2FmZVdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ2FsaXl1bmRyaXZlLmNvbS9kcml2ZScpICE9IC0xKSB7CiAgICBmdW5jdGlvbiBhZGRYTUxSZXF1ZXN0Q2FsbGJhY2soY2FsbGJhY2spIHsKICAgICAgICB2YXIgb2xkU2VuZCwgaTsKICAgICAgICBpZiAoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmNhbGxiYWNrcykgewogICAgICAgICAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5jYWxsYmFja3MgPSBbY2FsbGJhY2tdOwogICAgICAgICAgICBvbGRTZW5kID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7CiAgICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5jYWxsYmFja3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuY2FsbGJhY2tzW2ldKHRoaXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDAgJiYgYXJndW1lbnRzWzBdICYmIGFyZ3VtZW50c1swXS5pbmRleE9mICE9IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMF0uaW5kZXhPZignbWFya2VyJykgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5DcmVhdEZpcnN0TGlzdCA9IHRydWUKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEZpbGVMaXN0Lmxlbmd0aCAhPSAwICYmIGFyZ3VtZW50c1swXS5pbmRleE9mKEZpbGVMaXN0W0ZpbGVMaXN0Lmxlbmd0aCAtIDFdLm5hbWUpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk5leHRMaXN0ID0gdHJ1ZQoKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXS5pbmRleE9mKCdwYXJlbnRfZmlsZV9pZCcpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfZmlsZV9pZCA9IEpTT04ucGFyc2UoYXJndW1lbnRzWzBdKS5wYXJlbnRfZmlsZV9pZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vRmlsZUxpc3Q9W3tuYW1lOml0ZW0ubmV4dF9tYXJrZXIsbGlzdDppdGVtLml0ZW1zfV0KICAgICAgICAgICAgICAgIG9sZFNlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGFkZFhNTFJlcXVlc3RDYWxsYmFjayhmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgLy9DcmVhdGVCYW5MaXN0CiAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0ICYmIHhoci5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVVJMID09PSAiaHR0cHM6Ly93ZWJzdi5hbGl5dW5kcml2ZS5jb20vdG9rZW4vcmVmcmVzaCIpIHsKICAgICAgICAgICAgICAgICAgICBhY2Nlc3N0b2tlbiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKS5hY2Nlc3NfdG9rZW4KCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVVJMID09PSAiaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL3YyL2ZpbGUvbGlzdCJ8fHhoci5yZXNwb25zZVVSTCA9PT0gJ2h0dHBzOi8vYXBpLmFsaXl1bmRyaXZlLmNvbS9hZHJpdmUvdjMvZmlsZS9saXN0JykgewogICAgICAgICAgICAgICAgICAgIGxldCBxdWl0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFudC1tb2RhbC1oZWFkZXInKS5mb3JFYWNoKChpdGVtKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlubmVyVGV4dC5pbmRleE9mKCfnp7vliqgnKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLm9mZnNldFdpZHRoICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVpdCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIGlmIChxdWl0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSkKICAgICAgICAgICAgICAgICAgICBpZiAobGlzdHVybCA9PT0gdW5zYWZlV2luZG93LmxvY2F0aW9uLmhyZWYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5DcmVhdEZpcnN0TGlzdCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlTGlzdCA9IFt7IG5hbWU6IGl0ZW0ubmV4dF9tYXJrZXIsIGxpc3Q6IGl0ZW0uaXRlbXMgfV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVudW0gPSBpdGVtLml0ZW1zLmxlbmd0aAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IFNlYXJjaCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUxpc3QuZm9yRWFjaCgoaXRlbSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLm5hbWUgPT09IGl0ZW0ubmV4dF9tYXJrZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5saXN0ID0gaXRlbS5pdGVtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2ggPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTZWFyY2ggPT09IGZhbHNlICYmIHhoci5OZXh0TGlzdCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUxpc3QucHVzaCh7IG5hbWU6IGl0ZW0ubmV4dF9tYXJrZXIsIGxpc3Q6IGl0ZW0uaXRlbXMgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbnVtICs9IGl0ZW0uaXRlbXMubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3R1cmwgPSB1bnNhZmVXaW5kb3cubG9jYXRpb24uaHJlZgogICAgICAgICAgICAgICAgICAgICAgICBGaWxlTGlzdCA9IFt7IG5hbWU6IGl0ZW0ubmV4dF9tYXJrZXIsIGxpc3Q6IGl0ZW0uaXRlbXMgfV0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVudW0gPSBpdGVtLml0ZW1zLmxlbmd0aAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoQ3JlYXRlTGlzdG5lciA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRMaXN0bmVyKCkKICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlTGlzdG5lciA9IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgUmVmcmVzaFRva2VuKCkKICAgICAgICAgICAgICAgICAgICBTaG93VG9hc3QoJ+W3suiOt+WPluaWh+S7tuWIl+ihqCDmlbDph4\/kuLonICsgZmlsZW51bSArICco5pWw5a2X5aaC5LiN5YeG6K+36IGU57O75L2c6ICFKSBCeTrlpKnmiY3lsJHlubTmnY7mgZLpgZMnKQoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgIH0pOwoKfQoKaWYgKHVuc2FmZVdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ3Bhc3Nwb3J0LmFsaXl1bmRyaXZlLmNvbS9taW5pX2xvZ2luLmh0bScpICE9IC0xKSB7CiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRhaW5lcicpOwoKICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCJET01Ob2RlSW5zZXJ0ZWQiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBpZiAodXNlcm5hbWUgPT0gJycpIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIGlmIChwYXNzd29yZCA9PSAnJykgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgIGxldCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW4tYmxvY2tzJykKICAgICAgICBpZiAoaGVhZGVyID09PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luLWJsb2NrcycpLmNoaWxkcmVuWzFdLmNsaWNrKCkKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm0tbG9naW4taWQnKS52YWx1ZSA9IHVzZXJuYW1lCiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZtLWxvZ2luLXBhc3N3b3JkJykudmFsdWUgPSBwYXNzd29yZAogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXNzd29yZC1sb2dpbicpLmNsaWNrKCkKCiAgICB9KTsKCgoKICAgIHJldHVybjsKfQoKCgo=",
  "noFrames" : true,
  "injectTime" : 0
}